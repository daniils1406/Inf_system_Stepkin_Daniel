package test;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Arrays;
import java.util.concurrent.ThreadPoolExecutor;

public class SocketServer implements Runnable{

    public static int PROVERKA=1;

    private ServerSocket serverSocket;
    private Socket clientSocket;

    private ThreadPoolExecutor serverPool;

    private InputStream inputStream;
    private OutputStream outputStream;

    private static boolean TicOrTac=false;

    int numberOfFigure=0;

    private char figure='X';

    private char[] table;

    private SocketServer() {

    }

    public static SocketServer create(Integer port, ThreadPoolExecutor serverPool) throws IOException {
        SocketServer server = new SocketServer();
        server.serverSocket = new ServerSocket(port);
        server.serverPool = serverPool;
        server.table=new char[9];
        for(int i=0;i<server.table.length;i++){
            server.table[i]='_';
        }
        return server;
    }

    private byte[] extendArray(byte[] oldArray) {
        int oldSize = oldArray.length;
        byte[] newArray = new byte[oldSize * 2];
        System.arraycopy(oldArray, 0, newArray, 0, oldSize);
        return newArray;
    }


    private byte[] readInput(InputStream stream) throws IOException {
        int b;
        byte[] buffer = new byte[10];
        int counter = 0;
        while ((b = stream.read()) > -1) {
            buffer[counter++] = (byte) b;
            if (counter >= buffer.length) {
                buffer = extendArray(buffer);
            }
            if (counter > 1 && TicTacPacket.compareEOP(buffer, counter - 1)) {
                break;
            }
        }
        byte[] data = new byte[counter];
        System.arraycopy(buffer, 0, data, 0, counter);
        return data;
    }

    @Override
    public void run(){
        try{

//            synchronized (serverPool) {
//                PROVERKA++;
//                System.out.println(PROVERKA);
//                if (TicOrTac) {
//                    figure = '0';
//                } else {
//                    figure = 'X';
//                }
//                TicOrTac = true;
//            }
            clientSocket=serverSocket.accept();
            inputStream=clientSocket.getInputStream();
            outputStream=clientSocket.getOutputStream();
            while(true){
                synchronized (serverPool) {
                    System.out.println("1");
                    byte[] turnDate = readInput(inputStream);
                    System.out.println("2");
                    TicTacPacket turnPacket = TicTacPacket.parse(turnDate);
                    if (turnPacket.getType() == 0) {
                        System.out.println("Exit");
                        break;
                    }
                    String turn = turnPacket.getValue(1);
                    int row = Integer.parseInt(turn) / 10;
                    int column = Integer.parseInt(turn) % 10;
                    int position = ((row - 1) * 3 + column) - 1;
                    table[position] = figure;
                    if (figure == 'X') {
                        figure = '0';
                    } else {
                        figure = 'X';
                    }
                    numberOfFigure++;
                    //СДЕЛАТЬ ПРОВЕРКУ НА ПОБЕДУ И ОСТАНОВИТЬ ИГРУ В СЛУЧАЕ ВЫИГРЫША ОДНОЙ ИЗ СТОРОН ИЛИ ЗАПОЛНЕНИИ ВСЕЙ ТАБЛИЦЫ БЕЗ 3 В РЯД

                    boolean gameFinished = false;
                    for (row = 0; row < table.length / 3; row++) {
                        if (table[3 * row] == table[3 * row + 1] && table[3 * row] == table[3 * row + 2] && (table[3 * row] != '_')) {
                            gameFinished = true;
                        }
                    }
                    for (column = 0; column < table.length / 3; column++) {
                        if (table[column] == table[3 * 1 + column] && table[column] == table[3 * 2 + column] && (table[column] != '_')) {
                            gameFinished = true;
                        }
                    }
                    if (table[0] == table[4] && table[0] == table[8] && (table[0] != '_')) {
                        gameFinished = true;
                    }
                    if (table[2] == table[4] && table[2] == table[6] && (table[2] != '_')) {
                        gameFinished = true;
                    }
                    if (numberOfFigure == 9) {
                        gameFinished = true;
                    }
                    TicPacket responsePacket = TicPacket.create(1);
                    responsePacket.setValue(1, table);
                    if (gameFinished) {
                        responsePacket.setValue(2, table);
                        outputStream.write(responsePacket.toByteArray());
                        System.out.println("Game is over!");
                        break;
                    }
                    outputStream.write(responsePacket.toByteArray());
                    outputStream.flush();
                    System.out.println(Arrays.toString(responsePacket.toByteArray()));
                    System.out.println("Таблица отправлена обратно, передаем ход другому игроку");
                    serverPool.notify();
                    serverPool.wait();
                }
            }

        }catch (IOException e){
            throw new RuntimeException(e);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
